<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>New Page</title>
    <link rel="stylesheet" href="styles.css">
    <style>
        body {
            font-family: 'Montserrat', sans-serif;
            background: #090C08;
            color: white;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            overflow: hidden;
        }

        .main-container {
            display: flex;
            width: 100%;
            max-width: 1200px;
            margin: 0 auto;
        }

        .left-content {
            width: 30%;
            padding: 20px;
            border-right: 1px solid rgba(255, 255, 255, 0.1);
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .icon-item {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 10px;
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.1);
            transition: background 0.3s;
        }

        .icon-item:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .overview {
            width: 70%;
            padding: 20px;
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.1);
            transition: background 0.3s;
        }

        .overview-content {
            padding: 20px;
        }

        .overview h1 {
            font-size: 2rem;
            margin-bottom: 10px;
        }

        .overview p {
            font-size: 1.2rem;
            line-height: 1.5;
        }

        .custom-cursor {
            width: 40px;
            height: 40px;
            border: 2px solid #fff;
            border-radius: 50%;
            opacity: 0.15;
            position: fixed;
            pointer-events: none;
            transform: translate(-50%, -50%);
            transition: width 0.2s, height 0.2s;
            z-index: 9999;
        }

        .custom-cursor.clicked {
            width: 30px;
            height: 30px;
        }
    </style>
</head>

<body>
    <div class="background-gradient"></div>
    <div id="background-dots"></div>
    <div class="main-container">
        <!-- Left Panel -->
        <div class="left-content">
            <div class="icon-item">
                <svg><!-- Icon SVG Here --></svg>
                <span>Item 1</span>
            </div>
            <div class="icon-item">
                <svg><!-- Icon SVG Here --></svg>
                <span>Item 2</span>
            </div>
            <div class="icon-item">
                <svg><!-- Icon SVG Here --></svg>
                <span>Item 3</span>
            </div>
            <!-- Add more items as needed -->
        </div>

        <!-- Right Overview -->
        <div class="overview">
            <div class="overview-content">
                <h1>Overview Title</h1>
                <p>This is a short description of the content on this page.</p>
            </div>
        </div>
    </div>
    <svg width="100%" height="100%" style="position: fixed; top: 0; left: 0; z-index: -2;">
        <defs>
            <pattern id="dot-pattern" x="0" y="0" width="40" height="40" patternUnits="userSpaceOnUse">
                <circle cx="20" cy="20" r="2" fill="none" stroke="rgba(255, 255, 255, 0.03125)" stroke-width="1">
                    <animate attributeName="stroke-opacity" dur="3s" values="0.1; 0.5; 0.1" calcMode="spline"
                        keyTimes="0; 0.5; 1" keySplines="0.4 0 0.2 1; 0.4 0 0.2 1" begin="container.mouseover"
                        repeatCount="indefinite" />
                </circle>
            </pattern>
        </defs>
        <rect width="100%" height="100%" fill="url(#dot-pattern)" />
    </svg>
    <script>
        const svg = document.querySelector('svg');
        const pattern = document.querySelector('#dot-pattern');

        // Pattern movement state
        const patternState = {
            currentX: 0,
            currentY: 0,
            targetX: 0,
            targetY: 0
        };

        // Lerp function
        const lerp = (start, end, factor) => {
            return start + (end - start) * factor;
        };

        // Animation loop for smooth pattern movement
        const updatePattern = () => {
            // Smoothly interpolate current position towards target
            patternState.currentX = lerp(patternState.currentX, patternState.targetX, 0.1);
            patternState.currentY = lerp(patternState.currentY, patternState.targetY, 0.1);

            // Apply the smoothed position to pattern
            pattern.setAttribute('x', patternState.currentX.toString());
            pattern.setAttribute('y', patternState.currentY.toString());

            // Continue animation loop
            requestAnimationFrame(updatePattern);
        };

        // Start animation loop
        updatePattern();

        // Track mouse movement
        document.addEventListener('mousemove', (e) => {
            // Get mouse position relative to center of viewport
            const mouseX = e.clientX - window.innerWidth / 2;
            const mouseY = e.clientY - window.innerHeight / 2;

            // Calculate offset (max 50px in any direction)
            const MAX_OFFSET = 50;
            // Update target position for lerping
            patternState.targetX = (mouseX / window.innerWidth) * MAX_OFFSET;
            patternState.targetY = (mouseY / window.innerHeight) * MAX_OFFSET;
        });

        // Create custom cursor
        const cursor = document.createElement('div');
        cursor.classList.add('custom-cursor');
        document.body.appendChild(cursor);

        // Track mouse movement
        document.addEventListener('mousemove', (e) => {
            // Update cursor position immediately
            cursor.style.left = e.clientX + 'px';
            cursor.style.top = e.clientY + 'px';
        });

        // Handle click animation
        document.addEventListener('mousedown', () => {
            cursor.classList.add('clicked');
        });

        document.addEventListener('mouseup', () => {
            cursor.classList.remove('clicked');
        });

        // Reset position when mouse leaves
        document.addEventListener('mouseleave', () => {
            cursor.style.display = 'none';
        });

        document.addEventListener('mouseenter', () => {
            cursor.style.display = 'block';
        });
    </script>
</body>

</html>
